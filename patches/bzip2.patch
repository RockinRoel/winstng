diff -rupdN bzip2-1.0.6.orig/CMakeLists.txt bzip2-1.0.6/CMakeLists.txt
--- bzip2-1.0.6.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ bzip2-1.0.6/CMakeLists.txt	2011-01-21 01:09:02.000000000 +0100
@@ -0,0 +1,82 @@
+project(bzip2)
+cmake_minimum_required(VERSION 2.6)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
+
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    include_directories(${WCECOMPAT_INCLUDE_DIR})
+endif(WINCE)
+
+set(bzip2_lib_SRCS
+    blocksort.c
+    huffman.c
+    crctable.c
+    randtable.c
+    compress.c
+    decompress.c
+    bzlib.c
+)
+
+set(bzip2_scripts
+    bzdiff
+    bzgrep
+    bzmore
+)
+set(bzip2_docs
+    bzip2.txt
+    manual.pdf
+)
+set(bzip2_html
+    manual.html
+)
+
+set(CMAKE_DEBUG_POSTFIX "d")
+if(MSVC)
+  add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
+  set(CMAKE_C_FLAGS_RELEASE             "${CMAKE_C_FLAGS_RELEASE} /GL")
+  set(CMAKE_CXX_FLAGS_RELEASE           "${CMAKE_CXX_FLAGS_RELEASE} /GL")
+  set(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
+  set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG")
+  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG")
+endif(MSVC)
+
+add_library(bz2 SHARED ${bzip2_lib_SRCS})
+if(WIN32)
+  set_target_properties(bz2 PROPERTIES PREFIX "")
+endif(WIN32)
+
+if(WINCE)
+    target_link_libraries(bz2 ${WCECOMPAT_LIBRARIES})
+endif(WINCE)
+
+# bzip2recover
+add_executable(bzip2recover bzip2recover.c)
+target_link_libraries(bzip2recover bz2)
+# bzip2
+# disabled bin for wince because of problems with the file system
+if(NOT WINCE)
+add_executable(bzip2_bin bzip2.c)
+target_link_libraries(bzip2_bin bz2)
+set_target_properties(bzip2_bin PROPERTIES OUTPUT_NAME bzip2)
+endif(NOT WINCE)
+
+file(GLOB man1 ${bzip2_SOURCE_DIR}/*.1)
+
+install_targets(/lib bz2)
+install_targets(/bin bzip2recover)
+if(NOT WINCE)
+install_targets(/bin bzip2_bin)
+endif(NOT WINCE)
+if(NOT WIN32)
+  install(PROGRAMS ${bzip2_scripts} DESTINATION bin)
+endif(NOT WIN32)
+install(FILES ${man1}          DESTINATION share/man/man1)
+install(FILES ${bzip2_docs}    DESTINATION doc)
+install(FILES ${bzip2_html}    DESTINATION doc/html)
+install(FILES bzlib.h          DESTINATION include)
+
+# echo EXPORTS > bzip2.def
+# nm bzip2.dll | grep ' T _' | sed 's/.* T _//' >> bzip2.def
+# pexports bzip2.dll > bzip2.def
+# lib /def:bzip2.def /machine:x86
diff -rupdN bzip2-1.0.6.orig/bzip2.c bzip2-1.0.6/bzip2.c
--- bzip2-1.0.6.orig/bzip2.c	2011-01-21 01:06:25.000000000 +0100
+++ bzip2-1.0.6/bzip2.c	2011-01-21 01:06:50.000000000 +0100
@@ -153,6 +153,10 @@
 #endif /* BZ_LCCWIN32 */
 
 
+#ifdef _WIN32_WCE
+#define setmode _setmode
+#endif
+
 /*---------------------------------------------*/
 /*--
   Some more stuff for all platforms :-)
@@ -1805,7 +1809,9 @@ IntNative main ( IntNative argc, Char *a
    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
 
    /*-- Set up signal handlers for mem access errors --*/
+#ifndef _WIN32_WCE
    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
+#endif
 #  if BZ_UNIX
 #  ifndef __DJGPP__
    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
@@ -1949,8 +1955,10 @@ IntNative main ( IntNative argc, Char *a
    if (opMode != OM_Z) blockSize100k = 0;
 
    if (srcMode == SM_F2F) {
+#ifndef _WIN32_WCE
       signal (SIGINT,  mySignalCatcher);
       signal (SIGTERM, mySignalCatcher);
+#endif
 #     if BZ_UNIX
       signal (SIGHUP,  mySignalCatcher);
 #     endif
diff -rupdN bzip2-1.0.6.orig/bzlib.c bzip2-1.0.6/bzlib.c
--- bzip2-1.0.6.orig/bzlib.c	2011-01-21 01:06:25.000000000 +0100
+++ bzip2-1.0.6/bzlib.c	2011-01-21 01:06:50.000000000 +0100
@@ -30,6 +30,10 @@
 
 #include "bzlib_private.h"
 
+#ifdef _WIN32_WCE
+#define setmode _setmode
+#endif
+
 
 /*---------------------------------------------------*/
 /*--- Compression stuff                           ---*/
diff -rupdN bzip2-1.0.6.orig/bzlib.h bzip2-1.0.6/bzlib.h
--- bzip2-1.0.6.orig/bzlib.h	2011-01-21 01:06:25.000000000 +0100
+++ bzip2-1.0.6/bzlib.h	2011-01-21 01:06:50.000000000 +0100
@@ -81,19 +81,46 @@ typedef 
       /* windows.h define small to char */
 #      undef small
 #   endif
-#   ifdef BZ_EXPORT
-#   define BZ_API(func) WINAPI func
-#   define BZ_EXTERN extern
-#   else
+// #   ifdef BZ_EXPORT
+// #   define BZ_API(func) WINAPI func
+// #   define BZ_EXTERN extern
+// #   else
    /* import windows dll dynamically */
-#   define BZ_API(func) (WINAPI * func)
-#   define BZ_EXTERN
-#   endif
+// #   define BZ_API(func) (WINAPI * func)
+// #   define BZ_EXTERN
+// #   endif
+// #else
+// #   define BZ_API(func) func
+// #   define BZ_EXTERN extern
+#endif
+
+#ifndef __GNUC__
+# define __DLL_IMPORT__ __declspec(dllimport)
+# define __DLL_EXPORT__ __declspec(dllexport)
 #else
-#   define BZ_API(func) func
-#   define BZ_EXTERN extern
+# define __DLL_IMPORT__ __attribute__((dllimport)) extern
+# define __DLL_EXPORT__ __attribute__((dllexport)) extern
+#endif 
+
+#if (defined __WIN32__) || (defined _WIN32)
+# if defined BUILD_BZIP2_DLL  || defined BZ_EXPORT
+#  define BZIP2_DLL_IMPEXP __DLL_EXPORT__
+# elif defined(BZIP2_STATIC)
+#  define BZIP2_DLL_IMPEXP  
+# elif defined (USE_BZIP2_DLL) || defined BZ_IMPORT
+#  define BZIP2_DLL_IMPEXP __DLL_IMPORT__
+# elif defined (USE_BZIP2_STATIC)
+#  define BZIP2_DLL_IMPEXP   
+# else /* assume USE_BZIP2_DLL */
+#  define BZIP2_DLL_IMPEXP __DLL_IMPORT__
+# endif
+#else /* __WIN32__ */
+# define BZIP2_DLL_IMPEXP  
 #endif
 
+#define BZ_API(func) func
+#define BZ_EXTERN BZIP2_DLL_IMPEXP
+
 
 /*-- Core (low-level) library functions --*/
 
diff -rupdN bzip2-1.0.6.orig/cmake/modules/FindWcecompat.cmake bzip2-1.0.6/cmake/modules/FindWcecompat.cmake
--- bzip2-1.0.6.orig/cmake/modules/FindWcecompat.cmake	1970-01-01 01:00:00.000000000 +0100
+++ bzip2-1.0.6/cmake/modules/FindWcecompat.cmake	2011-01-21 01:06:50.000000000 +0100
@@ -0,0 +1,33 @@
+# Try to find Wcecompat functionality
+# Once done this will define
+#
+#  WCECOMPAT_FOUND - system has Wcecompat
+#  WCECOMPAT_INCLUDE_DIR - Wcecompat include directory
+#  WCECOMPAT_LIBRARIES - Libraries needed to use Wcecompat
+#
+# Copyright (c) 2010, Andreas Holzammer, <andy@kdab.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+
+if(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+  set(Wcecompat_FIND_QUIETLY TRUE)
+endif(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+
+find_path(WCECOMPAT_INCLUDE_DIR errno.h PATH_SUFFIXES wcecompat)
+
+set(WCECOMPAT_LIB_FOUND FALSE)
+
+if(WCECOMPAT_INCLUDE_DIR)
+    find_library(WCECOMPAT_LIBRARIES NAMES wcecompat wcecompatex )
+    if(WCECOMPAT_LIBRARIES)
+      set(WCECOMPAT_LIB_FOUND TRUE)
+    endif(WCECOMPAT_LIBRARIES)
+endif(WCECOMPAT_INCLUDE_DIR)
+
+# I have no idea what this is about, but it seems to be used quite often, so I add this here
+set(WCECOMPAT_CONST const)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Wcecompat  DEFAULT_MSG  WCECOMPAT_LIBRARIES  WCECOMPAT_LIB_FOUND)
+
+mark_as_advanced(WCECOMPAT_INCLUDE_DIR  WCECOMPAT_LIBRARIES  WCECOMPAT_CONST  WCECOMPAT_LIB_FOUND)
